generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Ou SQLite pour du local rapide
  url      = env("DATABASE_URL")
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  // Relation avec les candidatures & CVs
  applications  Application[]
  cvs           CV[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Activity Tracking






model Application {
  id          String   @id @default(cuid())
  userId      String
  jobId       String
  cvId        String?
  status      String   @default("pending") // "pending", "interview", "accepted", "rejected"
  appliedAt   DateTime @default(now())
  responseAt  DateTime?
  notes       String?
  interviewDate DateTime?

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  cv          CV?      @relation(fields: [cvId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  InterviewPrep InterviewPrep[]
}

model Job {
  id          String   @id @default(cuid())
  title       String
  company     String
  location    String
  contractType String
  description String
  skills      Json
  salaryRange String?
  sourceUrl   String?
  
  applications Application[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CV {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     Json
  pdfUrl      String?

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InterviewPrep {
  id             String   @id @default(cuid())
  applicationId  String
  faq            Json
  jargon         Json
  negotiationTips String?
  
  application    Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
